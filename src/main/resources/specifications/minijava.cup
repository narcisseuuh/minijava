package phase.b_syntax;
import phase.b_syntax.ast.*; // définition de l'AST
import compil.EnumOper; // import EnumOper
import compil.EnumType;

action code {:
   public EnumOper stringToEnumOper(String str) {
      switch (str) {
         case "+":
            return EnumOper.PLUS;
         case "-":
            return EnumOper.MINUS;
         case "*":
            return EnumOper.TIMES;
         case "&&":
            return EnumOper.AND;
         case "<":
            return EnumOper.LESS;
         default:
            return EnumOper.UNDEF;
      }
   }
:};

/* Lexèmes (Tokens) */
terminal CLASS, MAIN, OUT, PRINTLN, PUBLIC, STATIC, STRING, SYSTEM, VOID;
terminal RETURN, INT, BOOL, COL, EQ, IF, ELSE, WHILE, NEW, NOT, EXTENDS, LENGTH;
terminal DOT, SEMI, LBRACE, RBRACE;
terminal LPAREN, RPAREN;
terminal LBRACK, RBRACK;

/* Lexèmes avec valeur sémantique */
terminal Integer LIT_INT;
terminal String  IDENT;
terminal Boolean LIT_BOOL;
terminal String  BIN_OP;

/* Variables de la grammaire et Arbre de syntaxe */
nonterminal Axiom           axiom;
nonterminal KlassMain       klassMain;
nonterminal Ident           ident;
nonterminal Stmt            stmt;
nonterminal Expr            expr;
nonterminal AstList<Klass>  klassList;
nonterminal Klass           klass;
nonterminal KlassBody       klassBody;
nonterminal Method          method;
nonterminal MethodBody      methodBody;
nonterminal Variable        variable;
nonterminal Type            type;
nonterminal AstList<Formal> formalargs;
nonterminal AstList<Formal> formalmultiargs;
nonterminal AstList<Expr>   args;
nonterminal AstList<Expr>   multiargs;

/* Associativités et Priorités */
precedence left BIN_OP;
precedence right NOT;
precedence left LBRACK;
precedence left RBRACK;



/* Règles de Productions */
axiom     ::= klassMain:a klassList:b
                {: RESULT = Axiom.create(a, b);
                   RESULT.addPosition(axleft, bxright); :}
;
klassMain ::= CLASS:a ident:b LBRACE PUBLIC STATIC VOID MAIN
              LPAREN STRING LBRACK RBRACK ident:c RPAREN
              LBRACE stmt:d RBRACE RBRACE:z
                {: RESULT = KlassMain.create(b, c, d);
                   RESULT.addPosition(axleft, zxright); :}
;
klass ::= CLASS:c ident:a LBRACE klassBody:b RBRACE:r
               {: RESULT = Klass.create(a, Ident.create("Object"), b.attributs(), b.methodes());
                  RESULT.addPosition(cxleft, rxright); :}
   | CLASS:c ident:a EXTENDS ident:p LBRACE klassBody:b RBRACE:r
               {: RESULT = Klass.create(a, p, b.attributs(), b.methodes());
                  RESULT.addPosition(cxleft, rxright); :}
;
klassList ::= /* vide */
               {: RESULT = new AstList<Klass>(); :}
   | klass:k klassList:l
               {: RESULT = l; RESULT.add(k);
                  RESULT.addPosition(kxleft, lxright); :}
;
klassBody ::= /* vide */
            {: RESULT = KlassBody.create(); :}
   | variable:v klassBody:k
            {: RESULT = k; RESULT.addAttribut(v);
              RESULT.addPosition(vxleft, kxright); :}
   | method:m klassBody:k
            {: RESULT = k; RESULT.addMethode(m);
              RESULT.addPosition(mxleft, kxright); :}
;
method ::= PUBLIC:p type:t ident:i LPAREN formalargs:a RPAREN LBRACE
            methodBody:b RETURN expr:e SEMI RBRACE:r
               {: RESULT = Method.create(t, i, a, b.vars(), b.instructions(), e);
                  RESULT.addPosition(pxleft, rxright); :}
;
methodBody ::= /* vide */
               {: RESULT = MethodBody.create(); :}
   | variable:v methodBody:m
               {: RESULT = m; RESULT.addVar(v);
                  RESULT.addPosition(vxleft, mxright); :}
   | stmt:s methodBody:m
               {: RESULT = m; RESULT.addInstruction(s);
                  RESULT.addPosition(sxleft, mxright); :}
;
variable ::= type:t ident:i SEMI:s
               {: RESULT = Variable.create(t, i);
                  RESULT.addPosition(txleft, sxright); :}
;
type ::= ident:i
               {: RESULT = Type.create(i.name());
                  RESULT.addPosition(ixleft, ixright); :}
   | INT:i
               {: RESULT = Type.create(EnumType.INT);
                  RESULT.addPosition(ixleft, ixright); :}
   | BOOL:i
               {: RESULT = Type.create(EnumType.BOOL);
                  RESULT.addPosition(ixleft, ixright); :}
   | INT:a LBRACK RBRACK:b
               {: RESULT = Type.create(EnumType.INT_ARRAY);
                  RESULT.addPosition(axleft, bxright); :}
;
formalargs ::= /* vide */
               {: RESULT = new AstList<Formal>(); :}
   | formalmultiargs:m
               {: RESULT = m;
                  RESULT.addPosition(mxleft, mxright); :}
;
formalmultiargs ::= type:t ident:i 
               {: RESULT = new AstList<Formal>(); RESULT.add(Formal.create(t, i));
                  RESULT.addPosition(txleft, ixright); :}
   | type:t ident:i COL formalmultiargs:m
               {: RESULT = m; RESULT.add(Formal.create(t, i));
                  RESULT.addPosition(txleft, mxright); :}
;
args ::= /* vide */
               {: RESULT = new AstList<Expr>(); :}
   | multiargs:m
               {: RESULT = m;
                  RESULT.addPosition(mxleft, mxright); :}
;
multiargs ::= expr:e
               {: RESULT = new AstList<Expr>(); RESULT.add(e);
                  RESULT.addPosition(exleft, exright); :}
   | expr:e COL multiargs:m
               {: RESULT = m; RESULT.add(e);
                  RESULT.addPosition(exleft, mxright); :}
;
ident     ::= IDENT:a
                {: RESULT = Ident.create(a);
                   RESULT.addPosition(axleft, axright); :}
;
stmt      ::= SYSTEM:a DOT OUT DOT PRINTLN LPAREN expr:b RPAREN SEMI:z
                {: RESULT = StmtPrint.create(b);
                   RESULT.addPosition(axleft, zxright); :}
   | ident:i EQ expr:e SEMI:s
                {: RESULT = StmtAssign.create(i, e);
                   RESULT.addPosition(ixleft, sxright); :}
   | LBRACE:l methodBody:m RBRACE:r
                {: RESULT = StmtBlock.create(m.vars(), m.instructions());
                   RESULT.addPosition(lxleft, rxright); :}
   | IF:i LPAREN expr:e RPAREN stmt:s1 ELSE stmt:s2
                {: RESULT = StmtIf.create(e, s1, s2);
                   RESULT.addPosition(ixleft, s2xright); :}
   | WHILE:w LPAREN expr:e RPAREN stmt:s
                {: RESULT = StmtWhile.create(e, s);
                   RESULT.addPosition(wxleft, sxright); :} 
   | ident:id LBRACK expr:e1 RBRACK EQ expr:e2 SEMI:s
                {: RESULT = StmtArrayAssign.create(id, e1, e2);
                   RESULT.addPosition(idxleft, sxright); :}
;
expr      ::= LIT_INT:a
                {: RESULT = ExprLiteralInt.create(a);
                   RESULT.addPosition(axleft, axright); :}
   | LPAREN:l expr:e RPAREN:r
                {: RESULT = e;
                   RESULT.addPosition(lxleft, rxright); :}
   | expr:e1 BIN_OP:b expr:e2
                {: RESULT = ExprOpBin.create(e1, stringToEnumOper(b), e2);
                   RESULT.addPosition(e1xleft, e2xright); :}
   | expr:e DOT ident:i LPAREN args:a RPAREN:r
                {: RESULT = ExprCall.create(e, i, a);
                   RESULT.addPosition(exleft, rxright); :}
   | NEW:n ident:i LPAREN RPAREN:r
                {: RESULT = ExprNew.create(i);
                   RESULT.addPosition(nxleft, rxright); :}
   | ident:i 
                {: RESULT = ExprIdent.create(i);
                   RESULT.addPosition(ixleft, ixright); :}
   | LIT_BOOL:b 
                {: RESULT = ExprLiteralBool.create(b);
                   RESULT.addPosition(bxleft, bxright); :}
   | NOT:n expr:e 
                {: RESULT = ExprOpUn.create(EnumOper.NOT, e);
                   RESULT.addPosition(nxleft, exright); :}
   | expr:e1 LBRACK expr:e2 RBRACK:z
                {: RESULT = ExprArrayLookup.create(e1, e2);
                   RESULT.addPosition(e1xleft, zxright); :}
   | expr:e DOT LENGTH:z
                {: RESULT = ExprArrayLength.create(e);
                    RESULT.addPosition(exleft, zxright); :}
   | NEW INT LBRACK expr:e RBRACK:z
                {: RESULT = ExprArrayNew.create(e, EnumType.INT);
                    RESULT.addPosition(exleft, zxright); :}
;
